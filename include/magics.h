#include "bitboard.h"
#include "primitives.h"

#pragma once

constexpr int BishopMax = 512;
constexpr int RookMax = 4096;

class Magics
{
  public:
    Magics(bool useExisting);
    ~Magics();
    BitBoard AttackFor(Square sq, BitBoard occupancy, PieceType PT) const;
    void PrintMagics() const;

  private:
    BitBoard BishopMagics[64];
    BitBoard RookMagics[64];

    void initBishops(bool useExisting);
    void initRooks(bool useExisting);
    BitBoard (*BishopMagicAttacks)[BishopMax];
    BitBoard (*RookMagicAttacks)[RookMax];
};

BitBoard genRand();
// BitBoard popLeadingOne(BitBoard b);
// int positionLeadingOne(BitBoard b);
// void permuteBishopOccupancy(BitBoard moveMask, BitBoard *occs);

constexpr int BishopShifts[64]{
    // clang-format off
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6,
    //clang-format on
    };

constexpr int RookShifts[64]{
  12, 11, 11, 11, 11, 11, 11, 12,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  12, 11, 11, 11, 11, 11, 11, 12
};

constexpr BitBoard ExistingBishopMagics[64] = {
    // clang-format off
    0x40040404042468ULL,0x2404018401020004ULL,0x48480110200248ULL,0x80861000a4240ULL,0x1001104034010200ULL,0x2002021004a02040ULL,0x4002021621043800ULL,0x4000140114300400ULL,
    0x402102220e0400ULL,0x4008101208010024ULL,0xa90c080a024402ULL,0x2e00482040500800ULL,0x400020210000220ULL,0x20169004202808ULL,0x2090008450080400ULL,0x20000022080228a0ULL,
    0x4202120220204ULL,0x5082041040100ULL,0x14000208020008ULL,0x4c8000402512000ULL,0x20054020a0004ULL,0x102004100c1010ULL,0x820004108a0800ULL,0x2000061014810ULL,
    0x490400304041480ULL,0x1091020084110ULL,0x4010802220400ULL,0x1c09180001004100ULL,0x23010000104000ULL,0x2806108208080100ULL,0x403a420401880900ULL,0x420108a2090c0100ULL,
    0x84042001042110ULL,0x4801084a00081000ULL,0x26002220440800ULL,0x42008040100ULL,0x58e0408020060200ULL,0x1120008208010300ULL,0x802520a05040080ULL,0x102020041106408ULL,
    0x6080608404000ULL,0x44300c022805ULL,0x12010041002801ULL,0x2000004208000082ULL,0x20020c000480ULL,0x10200e0041c20201ULL,0x8081540400400ULL,0x84288403080244ULL,
    0x4010110900500ULL,0x22014148080480ULL,0x1880008401210220ULL,0x400010042022248ULL,0x204020c00a860800ULL,0x1400204010000ULL,0x20090201940804ULL,0x2008050304070440ULL,
    0x2004400c45000ULL,0x1302420200cc3402ULL,0x200442081440ULL,0x40000001082a0800ULL,0x1048420070020200ULL,0x2084010020080ULL,0x48400404040041ULL,0x18200400660060ULL,
    // clang format on
};

constexpr BitBoard ExistingRookMagics[64] = {
    // clang-format off
    0x8002b224400080ULL,0x40200240021001ULL,0x100096001001040ULL,0x100040902100020ULL,0x2100040801004290ULL,0x4280010400120080ULL,0x780208001004200ULL,0x100008020421100ULL,
    0x9002106800243ULL,0x3042004021020080ULL,0x8a004012006080ULL,0x408900201001010aULL,0x4021000433004800ULL,0x2001002000805ULL,0x2002000504420008ULL,0x1822000402014281ULL,
    0x900248000400080ULL,0x10124003200040ULL,0x110020010041ULL,0x2049610050002900ULL,0x80400800c801801ULL,0x812008022800400ULL,0x140010480d22ULL,0x80802000900408cULL,
    0x2080044040012002ULL,0x2500040042008ULL,0x6009014100600050ULL,0x1240290100607000ULL,0x80100100500ULL,0x2036010600080410ULL,0x3410400081012ULL,0x890010200314484ULL,
    0x420c000800092ULL,0x4b0012002400050ULL,0x80200105001140ULL,0x211001000b00ULL,0x42000822001004ULL,0x2082008002800400ULL,0x8200c102000804ULL,0x8044422000091ULL,
    0x80004020004000ULL,0x2040081004206000ULL,0x100a000910042ULL,0x81001030021ULL,0x1000800250010ULL,0x82001020040400ULL,0x1810010c0002ULL,0x804d118820014ULL,
    0x80002000c00140ULL,0x8b104001802100ULL,0x4024304100200900ULL,0x1020090230002100ULL,0x4001002408011100ULL,0x642000c10080200ULL,0x541a002b08040a00ULL,0x2001a8159040200ULL,
    0x2121110200c02082ULL,0x700400100201385ULL,0x500101400a102001ULL,0x10200408300101ULL,0x41000800100215ULL,0x1008204001801ULL,0x8208102104ULL,0x4100840022ULL,
    // clang format on
};
